name: Python PUBG Tracker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: docker.io
  IMAGE_NAME: pubg-tracker-bot

jobs:
  # Test and Quality Checks
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov flake8 black isort bandit safety

      - name: Code formatting check (Black)
        run: black --check --diff .

      - name: Import sorting check (isort)
        run: isort --check-only --diff .

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security check with bandit
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results-${{ matrix.python-version }}
          path: bandit-report.json

      - name: Check for security vulnerabilities in dependencies
        run: safety check --json --output safety-report.json || true

      - name: Upload safety results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-results-${{ matrix.python-version }}
          path: safety-report.json

      - name: Run basic tests
        run: |
          # Run basic import tests to ensure all modules load correctly
          python -c "
          import sys
          sys.path.append('.')
          try:
              from config.settings import settings
              from services.storage_service import storage_service
              from services.pubg_api_service import pubg_api_service
              print('✅ All imports successful')
          except Exception as e:
              print(f'❌ Import failed: {e}')
              sys.exit(1)
          "

      - name: Test configuration validation
        run: |
          python -c "
          import os
          from config.settings import Settings
          
          # Test with minimal required env vars
          os.environ['DISCORD_TOKEN'] = 'test_token'
          os.environ['DISCORD_CLIENT_ID'] = '123456789'
          os.environ['DISCORD_CHANNEL_ID'] = '987654321'
          os.environ['PUBG_API_KEY'] = 'test_key'
          os.environ['PUBG_API_URL'] = 'https://api.pubg.com'
          os.environ['DEFAULT_SHARD'] = 'steam'
          os.environ['MONGODB_URI'] = 'mongodb://test:27017/test'
          
          try:
              settings = Settings()
              print('✅ Settings validation successful')
          except Exception as e:
              print(f'❌ Settings validation failed: {e}')
              exit(1)
          "

  # Docker Build and Security Scan
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment (Optional - uncomment and configure as needed)
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [test, docker-build]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production
  #   
  #   steps:
  #     - name: Deploy to production
  #       run: |
  #         echo "Add your deployment steps here"
  #         # Example: SSH to server and restart container
  #         # ssh user@server 'docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pubg-tracker-bot:latest && docker-compose up -d'

  # Create Release (on tags)
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release Assets
        run: |
          # Create a deployment package
          tar -czf pubg-tracker-${{ github.event.release.tag_name }}.tar.gz \
            --exclude='.git' \
            --exclude='.venv' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./pubg-tracker-${{ github.event.release.tag_name }}.tar.gz
          asset_name: pubg-tracker-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip
