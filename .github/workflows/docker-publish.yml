name: Python PUBG Tracker CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]  # Trigger on version tags
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: docker.io
  IMAGE_NAME: pubg-tracker-bot

jobs:
  # Test and Quality Checks
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install development tools
        run: |
          pip install flake8 black isort bandit safety
        continue-on-error: true

      - name: Auto-format code with Black (non-blocking)
        run: |
          black . || echo "Black formatting completed with changes"
        continue-on-error: true

      - name: Auto-sort imports with isort (non-blocking)
        run: |
          isort . || echo "Import sorting completed with changes"
        continue-on-error: true

      - name: Lint with flake8 (warnings only)
        run: |
          # Only check for critical errors, treat others as warnings
          flake8 . --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed with warnings"
        continue-on-error: true

      - name: Security check with bandit (non-blocking)
        run: |
          bandit -r . -f json -o bandit-report.json || echo "Security scan completed"
        continue-on-error: true

      - name: Check dependencies with safety (non-blocking)
        run: |
          safety check || echo "Dependency check completed"
        continue-on-error: true

      - name: Run basic import tests
        run: |
          python -c "
          import sys
          sys.path.append('.')
          
          # Test environment setup
          import os
          os.environ['DISCORD_TOKEN'] = 'test_token'
          os.environ['DISCORD_CLIENT_ID'] = '123456789' 
          os.environ['DISCORD_CHANNEL_ID'] = '987654321'
          os.environ['PUBG_API_KEY'] = 'test_key'
          os.environ['PUBG_API_URL'] = 'https://api.pubg.com'
          os.environ['DEFAULT_SHARD'] = 'steam'
          os.environ['MONGODB_URI'] = 'mongodb://test:27017/test'
          
          try:
              from config.settings import settings
              print('✅ Settings import successful')
              
              from services.storage_service import storage_service
              print('✅ Storage service import successful')
              
              from services.pubg_api_service import pubg_api_service  
              print('✅ PUBG API service import successful')
              
              from services.discord_bot_service import bot
              print('✅ Discord bot service import successful')
              
              # Test settings validation
              settings.validate()
              print('✅ Settings validation successful')
              
              print('✅ All basic tests passed!')
              
          except Exception as e:
              print(f'❌ Test failed: {e}')
              import traceback
              traceback.print_exc()
              sys.exit(1)
          "

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: pubg-tracker-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create Release 
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Assets
        run: |
          # Create a deployment package
          tar -czf pubg-tracker-${{ steps.version.outputs.VERSION }}.tar.gz \
            --exclude='.git' \
            --exclude='.venv' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            .

      - name: Upload Release Asset (for releases)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./pubg-tracker-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_name: pubg-tracker-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: Create Release (for tags)
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            🚀 **PUBG Python Tracker ${{ steps.version.outputs.VERSION }}**
            
            ## Changes
            - Automated release from tag push
            - Updated environment variables to simplified configuration
            - Improved CI/CD pipeline
            
            ## Installation
            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/pubg-tracker-${{ steps.version.outputs.VERSION }}.tar.gz
            tar -xzf pubg-tracker-${{ steps.version.outputs.VERSION }}.tar.gz
            
            # Setup environment
            cp env.example .env
            # Edit .env with your credentials
            
            # Install and run
            pip install -r requirements.txt
            python main.py
            ```
            
            ## Docker
            ```bash
            docker run -d --env-file .env pubg-tracker-bot:latest
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset (for tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pubg-tracker-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_name: pubg-tracker-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip
